)
batters
batters %>%
filter(ab > 100) %>%
ggplot(mapping = aes(x = ab, y = ba)) +
geom_point() +
geom_smooth(se = FALSE)
not_cancelled %>%
group_by(year, month, day) %>%
summarize(
# average delay:
avg_delay1 = mean(arr_delay),
# average positive delay:
avg_delay2 = mean(arr_delay[arr_delay > 0])
)
not_cancelled %>%
group_by(year, month, day) %>%
summarize(
# average delay:
avg_delay1 = mean(arr_delay),
# average positive delay:
avg_delay2 = mean(arr_delay[arr_delay > 0])
)
avg_delay1 = mean(arr_delay)
not_cancelled %>%
group_by(year, month, day) %>%
summarize(
# average delay:
avg_delay1 = mean(arr_delay),
# average positive delay:
avg_delay2 = mean(arr_delay[arr_delay > 0])
)
not_cancelled %>%
group_by(year, month, day) %>%
summarize(
# average delay:
avg_delay1 = mean(arr_delay),
# average positive delay:
#avg_delay2 = mean(arr_delay[arr_delay > 0])
)
not_cancelled %>%
group_by(year, month, day) %>%
summarize(
# average delay:
avg_delay1 = mean(arr_delay),
# average positive delay:
avg_delay2 = mean(arr_delay[arr_delay > 0])
)
not_cancelled %>%
group_by(dest) %>%
summarize(distance_sd = sd(distance)) %>%
arrange(desc(distance_sd))
not_cancelled %>%
group_by(year, month, day) %>%
summarize(
first = min(dep_time),
last = max(dep_time)
)
not_cancelled %>%
group_by(year, month, day) %>%
summarize(
first = min(dep_time/12),
last = max(dep_time)
)
not_cancelled %>%
group_by(year, month, day) %>%
summarize(
first = min(dep_time/12),
last = max(dep_time/12)
)
not_cancelled %>%
group_by(year, month, day) %>%
summarize(
first = min(dep_time/24),
last = max(dep_time/24)
)
not_cancelled %>%
group_by(year, month, day) %>%
summarize(
first_dep = first(dep_time),
last_dep = last(dep_time)
)
not_cancelled %>%
group_by(year, month, day) %>%
mutate(r = min_rank(desc(dep_time))) %>%
filter(r %in% range(r))
sum(!is.na(x))
sum(!is.na(last))
sum(!is.na(day))
not_cancelled %>%
group_by(dest) %>%
summarize(carriers = n_distinct(carrier)) %>%
arrange(desc(carriers))
not_cancelled %>%
count(dest)
not_cancelled %>%
count(tailnum, wt = distance)
not_cancelled %>%
group_by(year, month, day) %>%
summarize(
n_early = sum(dep_time < 500)
)
not_cancelled %>%
group_by(year, month, day) %>%
summarize(
hour_perc = mean(arr_delay > 60)
)
(per_month <- summarize(per_day, flights = sum(flights)))
daily <- group_by(flights, year, month, day)
(per_day <- summarize(daily, flights = (n)))
(per_day <- summarize(daily, flights = n()))
summarize(daily)
(per_month <- summarize(per_day, flights = sum(flights)))
(per_day <- summarize(daily, flights = n()))
(per_month <- summarize(per_day, flights = sum(flights)))
(per_year <- summarize(per_month, flights = sum(flights)))
daily
flights
daily %>%
ungroup() %>%
summarize(flights = n())
(per_year <- summarize(per_month, flights = sum(flights)))
daily <- group_by(flights, year, month, day)
(per_day <- summarize(daily, flights = n()))
(per_month <- summarize(per_day, flights = sum(flights)))
(per_year <- summarize(per_month, flights = sum(flights)))
daily %>%
ungroup() %>%
summarize(flights = n())
flights_sml %>%
group_by(year, month, day) %>%
filter(rank(desc(arr_delay)) < 10)
popular_dests <- flights %>%
group_by(dest) %>%
filter(n() > 365)
popular_dests
popular_dests %>%
summarize(dest = n())
popular_dests %>%
summarize(dest1 = n())
popular_dests %>%
summarize(dest1 = n(), desc())
popular_dests %>%
summarize(dest1 = n(), desc(dest1))
popular_dests %>%
summarize(dest1 = n())
popular_dests <- flights %>%
group_by(dest) %>%
filter(n() > 365)
popular_dests %>%
summarize(dest1 = n())
popular_dests %>%
summarize(dest1 = n()) %>%
filter(desc(dest1))
filter(rank(desc(dest1))
filter(rank(desc(dest1))
popular_dests %>%
summarize(dest1 = n()) %>%
filter(rank(desc(dest1)))
popular_dests %>%
summarize(dest1 = n()) %>%
filter(rank(desc(dest1)) < 100)
popular_dests %>%
filter(arr_delay > 0) %>%
mutate(prop_delay = arr_dealy/ sum(arr_delay)) %>%
select(year:day, dest, arr_delay, prop_delay)
popular_dests %>%
filter(arr_delay > 0) %>%
mutate(prop_delay = arr_dealy/ sum(arr_delay)) %>%
select(year:day, dest, arr_delay, prop_delay)
popular_dests %>%
filter(arr_delay > 0) %>%
mutate(prop_delay = arr_delay/ sum(arr_delay)) %>%
select(year:day, dest, arr_delay, prop_delay)
library(tidyverse)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, color = cut))
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut, fill = cut))
diamonds %>%
count(cut)
# Histogram for continous variables
ggplot(data = diamonds) +
geom_histogram(mapping aes(x = carat), binwidth = 0.5)
# Histogram for continous variables
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = carat), binwidth = 0.5)
# Histogram for continous variables
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = carat))
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = carat), binwidth = 0.5)
count(cut_width(carat, 0.5)
diamonds %>%
count(cut_width(carat, 0.5))
diamonds %>%
count(cut_width(carat, 0.5))
smaller <- diamonds %>%
filter(carat < 3)
ggplot(data = smaller, mapping = aes(x = carat)) +
geom_histogram(binwidth = 0.1)
ggplot(data = smaller, mapping = aes(x = carat, color = cut)) +
geom_freqpoly(binwidth = 0.1)
ggplot(data = smaller, mapping = aes(x = carat)) +
geom_histogram(binwidth = 0.01)
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = y), binwidth = 0.5)
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = y), binwidth = 0.5) +
coord_cartesian(ylim = c(0, 50))
unusual <- diamonds %>%
filter(y < 3 | y > 20) %>%
arrange(y)
unusual
diamonds2 <- diamonds %>%
filter(between(y, 3, 20))
diamonds2
diamonds2 <- diamonds %>%
mutate(y = ifelse(y < 3 | y > 20, NA, y))
ggplot(data = diamonds2, mapping = aes(x = x, y = y)) +
geom_point()
ggplot(data = diamonds2, mapping = aes(x = x, y = y)) +
geom_point(na.rm = TRUE)
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %>% 100,
sched_min = sched_dep_time %>% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly(
mapping = aes(color = canclled),
binwidth = 1/4
)
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %>% 100,
sched_min = sched_dep_time %>% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly(
mapping = aes(color = canclled),
binwidth = 1/4
)
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %>% 100,
sched_min = sched_dep_time %>% 100,
sched_dep_time = sched_hour + sched_min / 60
)
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %>% 100,
sched_min = sched_dep_time %>% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly(
mapping = aes(color = canclled),
binwidth = 1/4
)
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %>% 100,
sched_min = sched_dep_time %>% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly(
mapping = aes(color = canclled),
binwidth = 1/4
)
dep_time
nycflights13::flights
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %>% 100,
sched_min = sched_dep_time %>% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly(
mapping = aes(color = canclled),
binwidth = 1/4
)
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %>% 100,
sched_min = sched_dep_time %>% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly(
mapping = aes(color = canclled),
binwidth = 1/4
)
cancelled = is.na(dep_time),
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %>% 100,
sched_min = sched_dep_time %>% 100,
sched_dep_time = sched_hour + sched_min / 60
)
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly(
mapping = aes(color = canclled),
binwidth = 1/4
)
cancelled = is.na(dep_time)
nycflights13::flights
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %/% 100,
sched_min = sched_dep_time %% 100,
sched_dep_time = sched_hour + sched_min / 60
) %>%
ggplot(mapping = aes(sched_dep_time)) +
geom_freqpoly(
mapping = aes(color = cancelled),
binwidth = 1/4
)
ggplot(data = diamonds, mapping = aes(x = price)) +
geom_freqpoly(mapping = aes(color = cut), binwidth = 500)
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
ggplot(data = diamonds, mapping = aes(x = price, y = ..density..)
) +
geom_freqpoly(mapping = aes(color = cut), binwidth = 500)
ggplot(data = diamonds, mapping = aes(x = cut, y  = price)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot(
mapping = aes(
x = reorder(class, hwy, FUN = median)
)
)
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot(
mapping = aes(
x = reorder(class, hwy, FUN = median)
)
) +
coord_flip()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_jitter(
mapping = aes(
x = reorder(class, hwy, FUN = median)
)
)
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot(
mapping = aes(
x = reorder(class, hwy, FUN = median)
)
) +
geom_jitter() +
coord_flip()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot(
mapping = aes(
x = reorder(class, hwy, FUN = median)
)
) +
coord_flip()
install.packages(ggbeeswarm)
install.packages(ggbeeswarm)
install.packages("ggbeeswarm")
beeswarm::swarmy(x = class, y = hwy)
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot(
mapping = aes(
x = reorder(class, hwy, FUN = median)
)
) +
beeswarm::swarmy(x = class, y = hwy) +
coord_flip()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot(
mapping = aes(
x = reorder(class, hwy, FUN = median)
)
) +
beeswarm::swarmy(x = class, y = hwy) +
coord_flip()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot(
mapping = aes(
x = reorder(class, hwy, FUN = median)
)
) +
beeswarm::swarmy(x = x, y = y
) +
coord_flip()
ggplot(data = mpg, mapping = beeswarm::swarmy(x = class, y = hwy)
) +
geom_jitter(
mapping = aes(
x = reorder(class, hwy, FUN = median)
)
)
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_boxplot(
mapping = aes(
x = reorder(class, hwy, FUN = median)
)
) +
coord_flip()
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_jitter(
mapping = aes(
x = reorder(class, hwy, FUN = median)
)
)
ggplot(data = mpg, mapping = aes(x = class, y = hwy)) +
geom_jitter(
mapping = aes(
x = reorder(class, hwy, FUN = median)
)
) +
ggbeeswarm::geom_beeswarm(mapping = aes())
ggplot(data = diamonds) +
geom_count(mapping = aes(x = cut, y = color))
diamonds %>%
count(color, cut)
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = n))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = rpice)
alpha = 1 / 100)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = pice)
alpha = 1 / 100)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = pice),
alpha = 1 / 100)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = pice),
alpha = 1 / 100)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = pice),
alpha = 1 / 100)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = pice),
alpha = 1 / 100)
ggplot(data = diamonds)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = pice),
alpha = 1 / 100)
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price),
alpha = 1 / 100)
install.packages("hexbin")
ggplot(data = smaller) +
geom_bin2d(mapping = aes(x = carat, y = price))
ggplot(data = smaller) +
geom_hex(mapping = aes(x = carat, y = price))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1), varwidth = TRUE))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_number(carat, 20)))
ggplot(data = diamonds) +
geom_point(mapping = aes(x = x, y = y)) +
coord_cartesian(xlim = c(4, 11), ylim = c(4, 11))
ggplot(data = faithful) +
geom_point(mapping = aes(x = eruptions, y = waiting))
library(modelr)
mod <- lm(log(price) ~ log(carat), data = diamonds)
mod
source('~/Desktop/R/R PROGRAMING/SCRIPTS/LEARNING R SCRIPT (APRIL 15, 2018).R', echo=TRUE)
diamonds2 <- diamonds %>%
add_residuals(mod) %>%
mutate(resid = exp(resid))
diamonds2
ggplot(data = diamonds) +
geom_boxplot(mapping = aes(x = cut, y = resid))
ggplot(data = diamonds2) +
geom_boxplot(mapping = aes(x = cut, y = resid))
source('~/Desktop/R/R PROGRAMING/SCRIPTS/LEARNING R SCRIPT (APRIL 15, 2018).R')
getwd()
setwd("~/Users/admin/Desktop/R/R PROGRAMING/SCRIPTS")
setwd("~/Desktop/R/R PROGRAMING/SCRIPTS")
getwd()
